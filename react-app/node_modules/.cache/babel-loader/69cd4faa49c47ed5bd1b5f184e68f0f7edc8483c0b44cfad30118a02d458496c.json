{"ast":null,"code":"var _jsxFileName = \"/Users/simonsprouse/Desktop/Rev/TimeSeriesLabel/my-app/src/Graph.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Graph() {\n  _s();\n  const canvasRef = useRef(null);\n  const [verticalLines, setVerticalLines] = useState([]);\n  const [dataPoints, setDataPoints] = useState(Array.from({\n    length: 20\n  }, () => [0, 0, 0]));\n  function drawVeriticalLine(event) {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    ctx.beginPath();\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, canvas.height);\n    ctx.strokeStyle = \"black\";\n    ctx.linewidth = 2;\n    ctx.stroke();\n    setVerticalLines(prevLines => [...prevLines, x]);\n  }\n  function drawGraph() {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const x_step = canvas.width / (dataPoints.length - 1);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.beginPath();\n    ctx.moveTo(0, dataPoints[0][0]);\n    dataPoints.forEach((point, index) => {\n      const x = index * x_step;\n      const price = point[0];\n      ctx.lineTo(x, price);\n    });\n    ctx.strokeStyle = \"blue\";\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  }\n\n  // populate array with data\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    setDataPoints(Array.from({\n      length: 20\n    }, () => [Math.random() * canvas.height, 0, 0]));\n  }, []);\n\n  // draw graph\n  useEffect(() => {\n    drawGraph();\n  }, [dataPoints]);\n\n  // add event listener to graph\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"click\", drawVeriticalLine);\n    return () => {\n      canvas.removeEventListener(\"click\", drawVeriticalLine);\n    };\n  }, []);\n  function handleClick() {\n    console.log(verticalLines);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"graph\",\n      ref: canvasRef,\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Graph, \"GSHoszKXT43QGMuLWIrl3cxh5WM=\");\n_c = Graph;\nexport default Graph;\n\n/*\n\n\nOk Here's what the fuck is happening. \n\nSo right now the lines get drawn but aren't stored anywhere. \n\nI need the data array to contain three items per point: \n    - price\n    - id\n    - class\n\nso the array should look like: \n\n    [[58, 0, 1], [50, 0, 1], [60, 1, 3]]\n\nPrice should be generated randomly for now. \nId will be unique for each section bounded by vertical lines\nClass will be generated randomly for now 0-k\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Graph","_s","canvasRef","verticalLines","setVerticalLines","dataPoints","setDataPoints","Array","from","length","drawVeriticalLine","event","canvas","current","ctx","getContext","rect","getBoundingClientRect","x","clientX","left","beginPath","moveTo","lineTo","height","strokeStyle","linewidth","stroke","prevLines","drawGraph","x_step","width","clearRect","forEach","point","index","price","lineWidth","Math","random","addEventListener","removeEventListener","handleClick","console","log","children","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/simonsprouse/Desktop/Rev/TimeSeriesLabel/my-app/src/Graph.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\n\nfunction Graph() { \n\n    const canvasRef = useRef(null);\n\n    const [verticalLines, setVerticalLines] = useState([]);\n    const [dataPoints, setDataPoints] = useState(Array.from({length: 20}, () => [0, 0, 0]));\n\n    function drawVeriticalLine(event) { \n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        \n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, canvas.height);\n        ctx.strokeStyle = \"black\";\n        ctx.linewidth = 2;\n        ctx.stroke();\n\n        setVerticalLines(prevLines => [...prevLines, x]);\n    }\n\n\n    function drawGraph() {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n\n        const x_step = canvas.width / (dataPoints.length - 1);\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.beginPath();\n        ctx.moveTo(0, dataPoints[0][0]);\n\n        dataPoints.forEach((point, index) => { \n            const x = index * x_step;\n            const price = point[0]\n            ctx.lineTo(x, price);\n        });\n\n        ctx.strokeStyle = \"blue\";\n        ctx.lineWidth = 2; \n        ctx.stroke();\n    }\n\n\n    // populate array with data\n    useEffect(() => { \n        const canvas = canvasRef.current;\n\n        setDataPoints(Array.from({length: 20}, () => [Math.random() * canvas.height, 0, 0]))\n\n\n\n\n    \n    }, []);\n\n\n    // draw graph\n    useEffect(() => { \n        drawGraph();\n\n    }, [dataPoints]);\n\n\n    // add event listener to graph\n    useEffect(() => { \n        const canvas = canvasRef.current;\n        canvas.addEventListener(\"click\", drawVeriticalLine);\n\n        return () => { \n            canvas.removeEventListener(\"click\", drawVeriticalLine);\n        }\n    }, []);\n\n\n    function handleClick() {\n        console.log(verticalLines);\n    }\n\n\n\n    return (\n        <>\n            <canvas id=\"graph\" ref={canvasRef} width=\"800\" height=\"400\"></canvas>\n            <button onClick={handleClick}>Log</button>\n        </>\n    )\n}\n\nexport default Graph;\n\n\n\n\n\n\n\n\n/*\n\n\nOk Here's what the fuck is happening. \n\nSo right now the lines get drawn but aren't stored anywhere. \n\nI need the data array to contain three items per point: \n    - price\n    - id\n    - class\n\nso the array should look like: \n\n    [[58, 0, 1], [50, 0, 1], [60, 1, 3]]\n\nPrice should be generated randomly for now. \nId will be unique for each section bounded by vertical lines\nClass will be generated randomly for now 0-k\n\n\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}