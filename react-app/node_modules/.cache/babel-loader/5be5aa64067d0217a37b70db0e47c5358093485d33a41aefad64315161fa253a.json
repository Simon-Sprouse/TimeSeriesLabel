{"ast":null,"code":"var _jsxFileName = \"/Users/simonsprouse/Desktop/Rev/TimeSeriesLabel/my-app/src/Graph.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Graph() {\n  _s();\n  const canvasRef = useRef(null);\n  const height = 400;\n  const [verticalLines, setVerticalLines] = useState([]);\n  const initialData = Array.from({\n    length: 20\n  }, () => [Math.random() * height, 0, 0]);\n  const [dataPoints, setDataPoints] = useState(initialData);\n  function addVeriticalLine(event) {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    setVerticalLines(prevLines => {\n      const newLines = [...prevLines, x].sort((a, b) => a - b);\n      updatePointIds(newLines);\n      return newLines;\n    });\n  }\n  function updatePointIds(verticalLines) {\n    const canvas = canvasRef.current;\n    const x_step = canvas.width / (dataPoints.length - 1);\n\n    // dataPoints.forEach(point => console.log(point));\n\n    const updatedPoints = dataPoints.map((point, index) => {\n      const x = x_step * index; // x pos on graph\n      let newId = 0;\n      for (let i = 0; i < verticalLines.length; i++) {\n        if (x > verticalLines[i]) {\n          newId = i + 1;\n        } else {\n          break;\n        }\n      }\n      return [point[0], newId, point[2]];\n    });\n\n    // updatedPoints.forEach(point => console.log(point));\n\n    setDataPoints(updatedPoints);\n  }\n  function drawGraph() {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const x_step = canvas.width / (dataPoints.length - 1);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.beginPath();\n    ctx.moveTo(0, dataPoints[0][0]);\n    ctx.strokeStyle = \"blue\";\n    ctx.lineWidth = 2;\n\n    // draw datapoints graph\n    dataPoints.forEach((point, index) => {\n      const x = index * x_step;\n      const price = point[0];\n      const color = point[2];\n      console.log(color);\n      if (color == 0) {\n        ctx.strokeStyle = \"blue\";\n      } else if (color == 1) {\n        ctx.strokeStyle = \"red\";\n      }\n      ctx.lineTo(x, price);\n      ctx.stroke();\n    });\n\n    // draw vertical lines\n    verticalLines.forEach(line => {\n      ctx.beginPath();\n      ctx.moveTo(line, 0);\n      ctx.lineTo(line, canvas.height);\n      ctx.strokeStyle = \"black\";\n      ctx.linewidth = 2;\n      ctx.stroke();\n    });\n  }\n\n  // draw graph\n  useEffect(() => {\n    console.log(\"detected a change in dataPoints\");\n    drawGraph();\n  }, [verticalLines, dataPoints]);\n\n  // add event listener to graph\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"click\", addVeriticalLine);\n    return () => {\n      canvas.removeEventListener(\"click\", addVeriticalLine);\n    };\n  }, []);\n  function handleClick() {\n    dataPoints.forEach(point => console.log(point));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"graph\",\n      ref: canvasRef,\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Graph, \"GQLgcUybEzE7VYYSjCkrofbiRok=\");\n_c = Graph;\nexport default Graph;\n\n/*\n\n\nOk Here's what the fuck is happening. \n\nSo right now the lines get drawn but aren't stored anywhere. \n\nI need the data array to contain three items per point: \n    - price\n    - id\n    - class\n\nso the array should look like: \n\n    [[58, 0, 1], [50, 0, 1], [60, 1, 3]]\n\nPrice should be generated randomly for now. \nId will be unique for each section bounded by vertical lines\nClass will be generated randomly for now 0-k\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Graph","_s","canvasRef","height","verticalLines","setVerticalLines","initialData","Array","from","length","Math","random","dataPoints","setDataPoints","addVeriticalLine","event","canvas","current","ctx","getContext","rect","getBoundingClientRect","x","clientX","left","prevLines","newLines","sort","a","b","updatePointIds","x_step","width","updatedPoints","map","point","index","newId","i","drawGraph","clearRect","beginPath","moveTo","strokeStyle","lineWidth","forEach","price","color","console","log","lineTo","stroke","line","linewidth","addEventListener","removeEventListener","handleClick","children","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/simonsprouse/Desktop/Rev/TimeSeriesLabel/my-app/src/Graph.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\n\nfunction Graph() { \n\n    const canvasRef = useRef(null);\n    const height = 400;\n\n    const [verticalLines, setVerticalLines] = useState([]);\n\n    const initialData = Array.from({length: 20}, () => [Math.random() * height, 0, 0])\n    const [dataPoints, setDataPoints] = useState(initialData);\n\n    function addVeriticalLine(event) { \n        \n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        \n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n\n\n        setVerticalLines(prevLines => {\n            const newLines = [...prevLines, x].sort((a, b) => a - b);\n            updatePointIds(newLines);\n            return newLines;\n        });\n\n    }\n\n\n    function updatePointIds(verticalLines) { \n        const canvas = canvasRef.current;\n        const x_step = canvas.width / (dataPoints.length - 1);\n\n        // dataPoints.forEach(point => console.log(point));\n\n        const updatedPoints = dataPoints.map((point, index) => { \n            const x = x_step * index; // x pos on graph\n            let newId = 0;\n\n            for (let i = 0; i < verticalLines.length; i++) {\n                if (x > verticalLines[i]) { \n                    newId = i + 1;\n                }\n                else { \n                    break;\n                }\n            }\n\n            return [point[0], newId, point[2]];\n        });\n\n        // updatedPoints.forEach(point => console.log(point));\n\n        setDataPoints(updatedPoints);\n\n    }\n\n\n    function drawGraph() {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n\n        const x_step = canvas.width / (dataPoints.length - 1);\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.beginPath();\n        ctx.moveTo(0, dataPoints[0][0]);\n\n        ctx.strokeStyle = \"blue\";\n        ctx.lineWidth = 2;\n\n        // draw datapoints graph\n        dataPoints.forEach((point, index) => { \n\n\n            const x = index * x_step;\n            const price = point[0];\n            const color = point[2];\n\n            console.log(color);\n\n            if (color == 0) {\n                ctx.strokeStyle = \"blue\";\n            }\n            else if (color == 1) {\n                ctx.strokeStyle = \"red\";\n            }\n\n            ctx.lineTo(x, price);\n            ctx.stroke();\n        });\n\n\n        // draw vertical lines\n        verticalLines.forEach(line => {\n            \n            ctx.beginPath();\n            ctx.moveTo(line, 0);\n            ctx.lineTo(line, canvas.height);\n            ctx.strokeStyle = \"black\";\n            ctx.linewidth = 2;\n            ctx.stroke();\n        })\n    }\n\n\n\n    // draw graph\n    useEffect(() => { \n        console.log(\"detected a change in dataPoints\");\n        drawGraph();\n    }, [verticalLines, dataPoints]);\n\n\n    // add event listener to graph\n    useEffect(() => { \n        const canvas = canvasRef.current;\n        canvas.addEventListener(\"click\", addVeriticalLine);\n\n        return () => { \n            canvas.removeEventListener(\"click\", addVeriticalLine);\n        }\n    }, []);\n\n\n    function handleClick() {\n        dataPoints.forEach(point => console.log(point));\n    }\n\n\n\n    return (\n        <>\n            <canvas id=\"graph\" ref={canvasRef} width=\"800\" height=\"400\"></canvas>\n            <button onClick={handleClick}>Log</button>\n        </>\n    )\n}\n\nexport default Graph;\n\n\n\n\n\n\n\n\n/*\n\n\nOk Here's what the fuck is happening. \n\nSo right now the lines get drawn but aren't stored anywhere. \n\nI need the data array to contain three items per point: \n    - price\n    - id\n    - class\n\nso the array should look like: \n\n    [[58, 0, 1], [50, 0, 1], [60, 1, 3]]\n\nPrice should be generated randomly for now. \nId will be unique for each section bounded by vertical lines\nClass will be generated randomly for now 0-k\n\n\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}