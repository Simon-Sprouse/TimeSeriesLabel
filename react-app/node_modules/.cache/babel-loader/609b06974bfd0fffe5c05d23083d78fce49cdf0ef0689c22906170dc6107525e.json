{"ast":null,"code":"var _jsxFileName = \"/Users/simonsprouse/Desktop/Rev/TimeSeriesLabel/my-app/src/Graph.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Graph() {\n  _s();\n  const canvasRef = useRef(null);\n  const [verticalLines, setVerticalLines] = useState([]);\n  const [dataPoints, setDataPoints] = useState(Array.from({\n    length: 20\n  }, () => [0, 0, 0]));\n  function addVeriticalLine(event) {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    setVerticalLines(prevLines => {\n      const newLines = [...prevLines, x].sort((a, b) => a - b);\n      updatePointIds(newLines);\n      return newLines;\n    });\n  }\n  function drawVerticalLines() {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n  }\n  function updatePointIds(verticalLines) {\n    const canvas = canvasRef.current;\n    const x_step = canvas.width / (dataPoints.length - 1);\n    const updatedPoints = dataPoints.map((point, index) => {\n      const x = x_step * index; // x pos on graph\n      let newId = 0;\n      for (let i = 0; i < verticalLines.length; i++) {\n        if (x > verticalLines[i]) {\n          newId = i + 1;\n        } else {\n          break;\n        }\n      }\n      return [point[0], newId, point[2]];\n    });\n    setDataPoints(updatedPoints);\n  }\n  function drawGraph() {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const x_step = canvas.width / (dataPoints.length - 1);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.beginPath();\n    ctx.moveTo(0, dataPoints[0][0]);\n    ctx.strokeStyle = \"blue\";\n    ctx.lineWidth = 2;\n\n    // draw datapoints graph\n    dataPoints.forEach((point, index) => {\n      const x = index * x_step;\n      const price = point[0];\n      const color = point[2];\n      if (color == 0) {\n        ctx.strokeStyle = \"blue\";\n      } else if (color == 1) {\n        ctx.strokeStyle = \"red\";\n      }\n      ctx.lineTo(x, price);\n      ctx.stroke();\n    });\n\n    // draw vertical lines\n    verticalLines.forEach(line => {\n      ctx.beginPath();\n      ctx.moveTo(line, 0);\n      ctx.lineTo(line, canvas.height);\n      ctx.strokeStyle = \"black\";\n      ctx.linewidth = 2;\n      ctx.stroke();\n    });\n  }\n\n  // populate array with data\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    setDataPoints(Array.from({\n      length: 20\n    }, () => [Math.random() * canvas.height, 0, 0]));\n  }, []);\n\n  // draw graph\n  useEffect(() => {\n    console.log(\"detected a change in dataPoints\");\n    drawGraph();\n  }, [dataPoints]);\n\n  // add event listener to graph\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"click\", drawVeriticalLine);\n    return () => {\n      canvas.removeEventListener(\"click\", drawVeriticalLine);\n    };\n  }, []);\n  function handleClick() {\n    console.log(verticalLines);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"graph\",\n      ref: canvasRef,\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Graph, \"GSHoszKXT43QGMuLWIrl3cxh5WM=\");\n_c = Graph;\nexport default Graph;\n\n/*\n\n\nOk Here's what the fuck is happening. \n\nSo right now the lines get drawn but aren't stored anywhere. \n\nI need the data array to contain three items per point: \n    - price\n    - id\n    - class\n\nso the array should look like: \n\n    [[58, 0, 1], [50, 0, 1], [60, 1, 3]]\n\nPrice should be generated randomly for now. \nId will be unique for each section bounded by vertical lines\nClass will be generated randomly for now 0-k\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Graph","_s","canvasRef","verticalLines","setVerticalLines","dataPoints","setDataPoints","Array","from","length","addVeriticalLine","event","canvas","current","ctx","getContext","rect","getBoundingClientRect","x","clientX","left","prevLines","newLines","sort","a","b","updatePointIds","drawVerticalLines","x_step","width","updatedPoints","map","point","index","newId","i","drawGraph","clearRect","height","beginPath","moveTo","strokeStyle","lineWidth","forEach","price","color","lineTo","stroke","line","linewidth","Math","random","console","log","addEventListener","drawVeriticalLine","removeEventListener","handleClick","children","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/simonsprouse/Desktop/Rev/TimeSeriesLabel/my-app/src/Graph.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\n\nfunction Graph() { \n\n    const canvasRef = useRef(null);\n\n    const [verticalLines, setVerticalLines] = useState([]);\n    const [dataPoints, setDataPoints] = useState(Array.from({length: 20}, () => [0, 0, 0]));\n\n    function addVeriticalLine(event) { \n        \n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        \n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n\n\n        setVerticalLines(prevLines => {\n            const newLines = [...prevLines, x].sort((a, b) => a - b);\n            updatePointIds(newLines);\n            return newLines;\n        });\n\n    }\n\n    function drawVerticalLines() { \n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        \n\n        \n\n        \n    }\n\n    function updatePointIds(verticalLines) { \n        const canvas = canvasRef.current;\n        const x_step = canvas.width / (dataPoints.length - 1);\n\n        const updatedPoints = dataPoints.map((point, index) => { \n            const x = x_step * index; // x pos on graph\n            let newId = 0;\n\n            for (let i = 0; i < verticalLines.length; i++) {\n                if (x > verticalLines[i]) { \n                    newId = i + 1;\n                }\n                else { \n                    break;\n                }\n            }\n\n            return [point[0], newId, point[2]];\n        });\n\n        setDataPoints(updatedPoints);\n\n    }\n\n\n    function drawGraph() {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n\n        const x_step = canvas.width / (dataPoints.length - 1);\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.beginPath();\n        ctx.moveTo(0, dataPoints[0][0]);\n\n        ctx.strokeStyle = \"blue\";\n        ctx.lineWidth = 2;\n\n        // draw datapoints graph\n        dataPoints.forEach((point, index) => { \n            const x = index * x_step;\n            const price = point[0];\n            const color = point[2];\n\n            if (color == 0) {\n                ctx.strokeStyle = \"blue\";\n            }\n            else if (color == 1) {\n                ctx.strokeStyle = \"red\";\n            }\n\n            ctx.lineTo(x, price);\n            ctx.stroke();\n        });\n\n        \n        // draw vertical lines\n        verticalLines.forEach(line => {\n            \n            ctx.beginPath();\n            ctx.moveTo(line, 0);\n            ctx.lineTo(line, canvas.height);\n            ctx.strokeStyle = \"black\";\n            ctx.linewidth = 2;\n            ctx.stroke();\n        })\n    }\n\n\n    // populate array with data\n    useEffect(() => { \n        const canvas = canvasRef.current;\n\n        setDataPoints(Array.from({length: 20}, () => [Math.random() * canvas.height, 0, 0]))\n\n\n\n\n    \n    }, []);\n\n\n    // draw graph\n    useEffect(() => { \n        console.log(\"detected a change in dataPoints\");\n        drawGraph();\n    }, [dataPoints]);\n\n\n    // add event listener to graph\n    useEffect(() => { \n        const canvas = canvasRef.current;\n        canvas.addEventListener(\"click\", drawVeriticalLine);\n\n        return () => { \n            canvas.removeEventListener(\"click\", drawVeriticalLine);\n        }\n    }, []);\n\n\n    function handleClick() {\n        console.log(verticalLines);\n    }\n\n\n\n    return (\n        <>\n            <canvas id=\"graph\" ref={canvasRef} width=\"800\" height=\"400\"></canvas>\n            <button onClick={handleClick}>Log</button>\n        </>\n    )\n}\n\nexport default Graph;\n\n\n\n\n\n\n\n\n/*\n\n\nOk Here's what the fuck is happening. \n\nSo right now the lines get drawn but aren't stored anywhere. \n\nI need the data array to contain three items per point: \n    - price\n    - id\n    - class\n\nso the array should look like: \n\n    [[58, 0, 1], [50, 0, 1], [60, 1, 3]]\n\nPrice should be generated randomly for now. \nId will be unique for each section bounded by vertical lines\nClass will be generated randomly for now 0-k\n\n\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}