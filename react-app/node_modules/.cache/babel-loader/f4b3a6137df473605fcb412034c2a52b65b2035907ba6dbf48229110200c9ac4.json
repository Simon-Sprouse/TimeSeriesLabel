{"ast":null,"code":"var _jsxFileName = \"/Users/simonsprouse/Desktop/Rev/TimeSeriesLabel/GitHubProject/TimeSeriesLabel/react-app/src/Graph.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Graph() {\n  _s();\n  const canvasRef = useRef(null);\n  const height = 400;\n  const [verticalLines, setVerticalLines] = useState([]);\n  const initialData = Array.from({\n    length: 200\n  }, () => [Math.random() * height, 0, 0]);\n  const [dataPoints, setDataPoints] = useState(initialData);\n  const [mode, setMode] = useState(\"Split\");\n  function addVeriticalLine(event) {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    setVerticalLines(prevLines => {\n      const newLines = [...prevLines, x].sort((a, b) => a - b);\n      updatePointIds(newLines);\n      return newLines;\n    });\n  }\n  function getClickedId(event) {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const x_step = canvas.width / (dataPoints.length - 1);\n    const index = Math.floor(x / x_step);\n    const pointId = dataPoints[index][1];\n    console.log(pointId);\n  }\n  function updatePointIds(verticalLines) {\n    const canvas = canvasRef.current;\n    const x_step = canvas.width / (dataPoints.length - 1);\n\n    // dataPoints.forEach(point => console.log(point));\n\n    const updatedPoints = dataPoints.map((point, index) => {\n      const x = x_step * index; // x pos on graph\n      let newId = 0;\n      for (let i = 0; i < verticalLines.length; i++) {\n        if (x > verticalLines[i]) {\n          newId = i + 1;\n        } else {\n          break;\n        }\n      }\n      return [point[0], newId, point[2]];\n    });\n\n    // updatedPoints.forEach(point => console.log(point));\n\n    setDataPoints(updatedPoints);\n  }\n  function drawGraph() {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const x_step = canvas.width / (dataPoints.length - 1);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.lineWidth = 2;\n\n    // draw datapoints graph\n    dataPoints.forEach((point, index) => {\n      const x = index * x_step;\n      const price = point[0];\n      const id = point[1];\n      const color = point[2];\n      if (index > 0) {\n        const prevX = (index - 1) * x_step;\n        const prevPoint = dataPoints[index - 1];\n        const prevPrice = prevPoint[0];\n        const prevId = prevPoint[1];\n        if (color % 4 == 0) {\n          ctx.strokeStyle = \"blue\";\n        } else if (color % 4 == 1) {\n          ctx.strokeStyle = \"red\";\n        } else if (color % 4 == 2) {\n          ctx.strokeStyle = \"green\";\n        } else if (color % 4 == 3) {\n          ctx.strokeStyle = \"yellow\";\n        }\n        ctx.beginPath();\n        ctx.moveTo(prevX, prevPrice);\n        ctx.lineTo(x, price);\n        ctx.stroke();\n      }\n    });\n\n    // draw vertical lines\n    verticalLines.forEach(line => {\n      ctx.beginPath();\n      ctx.moveTo(line, 0);\n      ctx.lineTo(line, canvas.height);\n      ctx.strokeStyle = \"black\";\n      ctx.linewidth = 2;\n      ctx.stroke();\n    });\n  }\n\n  // draw graph\n  useEffect(() => {\n    console.log(\"detected a change in dataPoints\");\n    drawGraph();\n  }, [verticalLines, dataPoints]);\n  function handleCanvasClick(event) {\n    if (mode == \"Split\") {\n      addVeriticalLine(event);\n    } else if (mode == \"Edit\") {\n      // function to detect id\n      // function to set ids with correct color\n    }\n  }\n  function handleClick() {\n    dataPoints.forEach(point => console.log(point));\n  }\n  function toggleMode() {\n    if (mode == \"Split\") {\n      setMode(\"Edit\");\n    } else {\n      setMode(\"Split\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"graph\",\n      ref: canvasRef,\n      onClick: handleCanvasClick,\n      width: \"800\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleMode,\n      children: \"Toggle Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Graph, \"lpl1q9s8ATOYhT+D463GzwDdI78=\");\n_c = Graph;\nexport default Graph;\n\n/*\n\n\nOk Here's what the fuck is happening. \n\nSo right now the lines get drawn but aren't stored anywhere. \n\nI need the data array to contain three items per point: \n    - price\n    - id\n    - class\n\nso the array should look like: \n\n    [[58, 0, 1], [50, 0, 1], [60, 1, 3]]\n\nPrice should be generated randomly for now. \nId will be unique for each section bounded by vertical lines\nClass will be generated randomly for now 0-k\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Graph","_s","canvasRef","height","verticalLines","setVerticalLines","initialData","Array","from","length","Math","random","dataPoints","setDataPoints","mode","setMode","addVeriticalLine","event","canvas","current","ctx","getContext","rect","getBoundingClientRect","x","clientX","left","prevLines","newLines","sort","a","b","updatePointIds","getClickedId","x_step","width","index","floor","pointId","console","log","updatedPoints","map","point","newId","i","drawGraph","clearRect","lineWidth","forEach","price","id","color","prevX","prevPoint","prevPrice","prevId","strokeStyle","beginPath","moveTo","lineTo","stroke","line","linewidth","handleCanvasClick","handleClick","toggleMode","children","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/simonsprouse/Desktop/Rev/TimeSeriesLabel/GitHubProject/TimeSeriesLabel/react-app/src/Graph.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\n\nfunction Graph() { \n\n    const canvasRef = useRef(null);\n    const height = 400;\n\n    const [verticalLines, setVerticalLines] = useState([]);\n\n    const initialData = Array.from({length: 200}, () => [Math.random() * height, 0, 0])\n    const [dataPoints, setDataPoints] = useState(initialData);\n\n    const [mode, setMode] = useState(\"Split\");\n\n    function addVeriticalLine(event) { \n        \n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        \n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n\n\n        setVerticalLines(prevLines => {\n            const newLines = [...prevLines, x].sort((a, b) => a - b);\n            updatePointIds(newLines);\n            return newLines;\n        });\n\n    }\n\n    function getClickedId(event) { \n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const x_step = canvas.width / (dataPoints.length - 1);\n        const index = Math.floor(x / x_step);\n        const pointId = dataPoints[index][1];\n        console.log(pointId);\n    }\n\n\n    function updatePointIds(verticalLines) { \n        const canvas = canvasRef.current;\n        const x_step = canvas.width / (dataPoints.length - 1);\n\n        // dataPoints.forEach(point => console.log(point));\n\n        const updatedPoints = dataPoints.map((point, index) => { \n            const x = x_step * index; // x pos on graph\n            let newId = 0;\n\n            for (let i = 0; i < verticalLines.length; i++) {\n                if (x > verticalLines[i]) { \n                    newId = i + 1;\n                }\n                else { \n                    break;\n                }\n            }\n\n            return [point[0], newId, point[2]];\n        });\n\n        // updatedPoints.forEach(point => console.log(point));\n\n        setDataPoints(updatedPoints);\n\n    }\n\n\n    function drawGraph() {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n\n        const x_step = canvas.width / (dataPoints.length - 1);\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.lineWidth = 2;\n\n        // draw datapoints graph\n        dataPoints.forEach((point, index) => { \n\n\n            const x = index * x_step;\n            const price = point[0];\n            const id = point[1];\n            const color = point[2];\n\n            if (index > 0) { \n\n                \n                const prevX = (index - 1) * x_step;\n\n                const prevPoint = dataPoints[index - 1];\n                const prevPrice = prevPoint[0];\n                const prevId = prevPoint[1]\n\n\n                if (color % 4 == 0) {\n                    ctx.strokeStyle = \"blue\";\n                }\n                else if (color % 4 == 1) {\n                    ctx.strokeStyle = \"red\";\n                }\n                else if (color % 4 == 2) {\n                    ctx.strokeStyle = \"green\";\n                }\n                else if (color % 4 == 3) {\n                    ctx.strokeStyle = \"yellow\";\n                }\n                \n                ctx.beginPath();\n                ctx.moveTo(prevX, prevPrice);\n                ctx.lineTo(x, price);\n                ctx.stroke();\n            }\n            \n        });\n\n\n        // draw vertical lines\n        verticalLines.forEach(line => {\n            \n            ctx.beginPath();\n            ctx.moveTo(line, 0);\n            ctx.lineTo(line, canvas.height);\n            ctx.strokeStyle = \"black\";\n            ctx.linewidth = 2;\n            ctx.stroke();\n        })\n    }\n\n\n\n    // draw graph\n    useEffect(() => { \n        console.log(\"detected a change in dataPoints\");\n        drawGraph();\n    }, [verticalLines, dataPoints]);\n\n\n    function handleCanvasClick(event) { \n        if (mode == \"Split\") { \n            addVeriticalLine(event);\n        }\n        else if (mode == \"Edit\") { \n            // function to detect id\n            // function to set ids with correct color\n        }\n    }\n\n    function handleClick() {\n        dataPoints.forEach(point => console.log(point));\n    }\n\n    function toggleMode() { \n        if (mode == \"Split\") { \n            setMode(\"Edit\");\n        }\n        else { \n            setMode(\"Split\");\n        }\n\n        \n\n    }\n\n\n    return (\n        <>\n            <canvas id=\"graph\" ref={canvasRef} onClick={handleCanvasClick} width=\"800\" height=\"400\"></canvas>\n            <button onClick={handleClick}>Log</button>\n            <button onClick={toggleMode}>Toggle Mode</button>\n        </>\n    )\n}\n\nexport default Graph;\n\n\n\n\n\n\n\n\n/*\n\n\nOk Here's what the fuck is happening. \n\nSo right now the lines get drawn but aren't stored anywhere. \n\nI need the data array to contain three items per point: \n    - price\n    - id\n    - class\n\nso the array should look like: \n\n    [[58, 0, 1], [50, 0, 1], [60, 1, 3]]\n\nPrice should be generated randomly for now. \nId will be unique for each section bounded by vertical lines\nClass will be generated randomly for now 0-k\n\n\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}