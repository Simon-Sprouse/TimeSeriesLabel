{"ast":null,"code":"var _jsxFileName = \"/Users/simonsprouse/Desktop/Rev/TimeSeriesLabel/GitHubProject/TimeSeriesLabel/react-app/src/Graph.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Graph(dataFromCsv) {\n  _s();\n  const [mode, setMode] = useState(\"Split\");\n  const canvasRef = useRef(null);\n  const height = 600;\n  const [verticalLines, setVerticalLines] = useState([]);\n  const initialData = dataFromCsv.length > 0 ? dataFromCsv['dataFromCsv'] : Array.from({\n    length: 300\n  }, () => [0, 0, 0]);\n  const [dataPoints, setDataPoints] = useState(initialData);\n  useEffect(() => {\n    setDataPoints(dataFromCsv['dataFromCsv']);\n  });\n  function getClickedId(event) {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const x_step = canvas.width / (dataPoints.length - 1);\n    const index = Math.floor(x / x_step);\n    const pointId = dataPoints[index][1];\n    console.log(pointId);\n    return pointId;\n  }\n  function updateColorById(id) {\n    const updatedPoints = dataPoints.map(point => {\n      const pointId = point[1];\n      if (pointId == id) {\n        return [point[0], point[1], point[2] + 1];\n      }\n      return point;\n    });\n    setDataPoints(updatedPoints);\n  }\n  function addVeriticalLine(event) {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const rect = canvas.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    setVerticalLines(prevLines => {\n      const newLines = [...prevLines, x].sort((a, b) => a - b);\n      updatePointIds(newLines);\n      return newLines;\n    });\n  }\n  function updatePointIds(verticalLines) {\n    const canvas = canvasRef.current;\n    const x_step = canvas.width / (dataPoints.length - 1);\n\n    // dataPoints.forEach(point => console.log(point));\n\n    const updatedPoints = dataPoints.map((point, index) => {\n      const x = x_step * index; // x pos on graph\n      let newId = 0;\n      for (let i = 0; i < verticalLines.length; i++) {\n        if (x > verticalLines[i]) {\n          newId = i + 1;\n        } else {\n          break;\n        }\n      }\n      return [point[0], newId, point[2]];\n    });\n\n    // updatedPoints.forEach(point => console.log(point));\n\n    setDataPoints(updatedPoints);\n  }\n  function drawGraph() {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const x_step = canvas.width / (dataPoints.length - 1);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.lineWidth = 2;\n\n    // draw datapoints graph\n    dataPoints.forEach((point, index) => {\n      const x = index * x_step;\n      const price = point[0];\n      const id = point[1];\n      const color = point[2];\n      if (index > 0) {\n        const prevX = (index - 1) * x_step;\n        const prevPoint = dataPoints[index - 1];\n        const prevPrice = prevPoint[0];\n        const prevId = prevPoint[1];\n        if (color % 4 == 0) {\n          ctx.strokeStyle = \"blue\";\n        } else if (color % 4 == 1) {\n          ctx.strokeStyle = \"red\";\n        } else if (color % 4 == 2) {\n          ctx.strokeStyle = \"green\";\n        } else if (color % 4 == 3) {\n          ctx.strokeStyle = \"yellow\";\n        }\n        ctx.beginPath();\n        ctx.moveTo(prevX, prevPrice);\n        ctx.lineTo(x, price);\n        ctx.stroke();\n      }\n    });\n\n    // draw vertical lines\n    verticalLines.forEach(line => {\n      ctx.beginPath();\n      ctx.moveTo(line, 0);\n      ctx.lineTo(line, canvas.height);\n      ctx.strokeStyle = \"black\";\n      ctx.linewidth = 2;\n      ctx.stroke();\n    });\n  }\n\n  // draw graph\n  useEffect(() => {\n    console.log(\"detected a change in dataPoints\");\n    drawGraph();\n  }, [verticalLines, dataPoints]);\n  function handleCanvasClick(event) {\n    if (mode == \"Split\") {\n      addVeriticalLine(event);\n    } else if (mode == \"Edit\") {\n      // function to detect id\n      const id = getClickedId(event);\n      // function to set ids with correct color\n      updateColorById(id);\n    }\n  }\n  function handleClick() {\n    dataPoints.forEach(point => console.log(point));\n  }\n  function toggleMode() {\n    if (mode == \"Split\") {\n      setMode(\"Edit\");\n    } else {\n      setMode(\"Split\");\n    }\n  }\n  function test() {\n    // dataFromCsv.forEach((point, index) => { \n    //     console.log(point, index);\n    // })\n    console.log(dataFromCsv['dataFromCsv']);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"graph\",\n      ref: canvasRef,\n      onClick: handleCanvasClick,\n      width: \"1600\",\n      height: \"600\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleMode,\n      children: \"Toggle Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: test,\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Graph, \"jJYG0NgICLg53lp3AYxaDTRkn3w=\");\n_c = Graph;\nexport default Graph;\n\n/*\n\n\nOk Here's what the fuck is happening. \n\nSo right now the lines get drawn but aren't stored anywhere. \n\nI need the data array to contain three items per point: \n    - price\n    - id\n    - class\n\nso the array should look like: \n\n    [[58, 0, 1], [50, 0, 1], [60, 1, 3]]\n\nPrice should be generated randomly for now. \nId will be unique for each section bounded by vertical lines\nClass will be generated randomly for now 0-k\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Graph","dataFromCsv","_s","mode","setMode","canvasRef","height","verticalLines","setVerticalLines","initialData","length","Array","from","dataPoints","setDataPoints","getClickedId","event","canvas","current","rect","getBoundingClientRect","x","clientX","left","x_step","width","index","Math","floor","pointId","console","log","updateColorById","id","updatedPoints","map","point","addVeriticalLine","ctx","getContext","prevLines","newLines","sort","a","b","updatePointIds","newId","i","drawGraph","clearRect","lineWidth","forEach","price","color","prevX","prevPoint","prevPrice","prevId","strokeStyle","beginPath","moveTo","lineTo","stroke","line","linewidth","handleCanvasClick","handleClick","toggleMode","test","children","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/simonsprouse/Desktop/Rev/TimeSeriesLabel/GitHubProject/TimeSeriesLabel/react-app/src/Graph.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\n\nfunction Graph(dataFromCsv) { \n\n    const [mode, setMode] = useState(\"Split\");\n\n    const canvasRef = useRef(null);\n    const height = 600;\n\n    const [verticalLines, setVerticalLines] = useState([]);\n\n\n    const initialData = dataFromCsv.length > 0 \n        ? dataFromCsv['dataFromCsv'] : \n        Array.from({length: 300}, () => [0, 0, 0])\n    const [dataPoints, setDataPoints] = useState(initialData);\n\n    useEffect(() => { \n        setDataPoints(dataFromCsv['dataFromCsv']);\n    })\n\n\n\n\n\n    function getClickedId(event) { \n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const x_step = canvas.width / (dataPoints.length - 1);\n        const index = Math.floor(x / x_step);\n        const pointId = dataPoints[index][1];\n        console.log(pointId);\n\n        return pointId;\n    }\n\n    function updateColorById(id) { \n        const updatedPoints = dataPoints.map(point => {\n            const pointId = point[1];\n            if (pointId == id) { \n                return [point[0], point[1], point[2] + 1];\n            }\n            return point;\n        \n        });\n        setDataPoints(updatedPoints);\n    }\n\n    function addVeriticalLine(event) { \n        \n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        \n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n\n\n        setVerticalLines(prevLines => {\n            const newLines = [...prevLines, x].sort((a, b) => a - b);\n            updatePointIds(newLines);\n            return newLines;\n        });\n\n    }\n\n\n\n\n    function updatePointIds(verticalLines) { \n        const canvas = canvasRef.current;\n        const x_step = canvas.width / (dataPoints.length - 1);\n\n        // dataPoints.forEach(point => console.log(point));\n\n        const updatedPoints = dataPoints.map((point, index) => { \n            const x = x_step * index; // x pos on graph\n            let newId = 0;\n\n            for (let i = 0; i < verticalLines.length; i++) {\n                if (x > verticalLines[i]) { \n                    newId = i + 1;\n                }\n                else { \n                    break;\n                }\n            }\n\n            return [point[0], newId, point[2]];\n        });\n\n        // updatedPoints.forEach(point => console.log(point));\n\n        setDataPoints(updatedPoints);\n\n    }\n\n\n    function drawGraph() {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n\n        const x_step = canvas.width / (dataPoints.length - 1);\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.lineWidth = 2;\n\n        // draw datapoints graph\n        dataPoints.forEach((point, index) => { \n\n\n            const x = index * x_step;\n            const price = point[0];\n            const id = point[1];\n            const color = point[2];\n\n            if (index > 0) { \n\n                \n                const prevX = (index - 1) * x_step;\n\n                const prevPoint = dataPoints[index - 1];\n                const prevPrice = prevPoint[0];\n                const prevId = prevPoint[1]\n\n\n                if (color % 4 == 0) {\n                    ctx.strokeStyle = \"blue\";\n                }\n                else if (color % 4 == 1) {\n                    ctx.strokeStyle = \"red\";\n                }\n                else if (color % 4 == 2) {\n                    ctx.strokeStyle = \"green\";\n                }\n                else if (color % 4 == 3) {\n                    ctx.strokeStyle = \"yellow\";\n                }\n                \n                ctx.beginPath();\n                ctx.moveTo(prevX, prevPrice);\n                ctx.lineTo(x, price);\n                ctx.stroke();\n            }\n            \n        });\n\n\n        // draw vertical lines\n        verticalLines.forEach(line => {\n            \n            ctx.beginPath();\n            ctx.moveTo(line, 0);\n            ctx.lineTo(line, canvas.height);\n            ctx.strokeStyle = \"black\";\n            ctx.linewidth = 2;\n            ctx.stroke();\n        })\n    }\n\n\n\n    // draw graph\n    useEffect(() => { \n        console.log(\"detected a change in dataPoints\");\n        drawGraph();\n    }, [verticalLines, dataPoints]);\n\n\n    function handleCanvasClick(event) { \n        if (mode == \"Split\") { \n            addVeriticalLine(event);\n        }\n        else if (mode == \"Edit\") { \n            // function to detect id\n            const id = getClickedId(event);\n            // function to set ids with correct color\n            updateColorById(id);\n        }\n    }\n\n    function handleClick() {\n        dataPoints.forEach(point => console.log(point));\n    }\n\n    function toggleMode() { \n        if (mode == \"Split\") { \n            setMode(\"Edit\");\n        }\n        else { \n            setMode(\"Split\");\n        }\n\n        \n\n    }\n\n\n    function test() {\n        // dataFromCsv.forEach((point, index) => { \n        //     console.log(point, index);\n        // })\n        console.log(dataFromCsv['dataFromCsv']);\n    }\n\n\n    return (\n        <>\n            <canvas id=\"graph\" ref={canvasRef} onClick={handleCanvasClick} width=\"1600\" height=\"600\"></canvas>\n            <button onClick={handleClick}>Log</button>\n            <button onClick={toggleMode}>Toggle Mode</button>\n            <button onClick={test}>Test</button>\n        </>\n    )\n}\n\nexport default Graph;\n\n\n\n\n\n\n\n\n/*\n\n\nOk Here's what the fuck is happening. \n\nSo right now the lines get drawn but aren't stored anywhere. \n\nI need the data array to contain three items per point: \n    - price\n    - id\n    - class\n\nso the array should look like: \n\n    [[58, 0, 1], [50, 0, 1], [60, 1, 3]]\n\nPrice should be generated randomly for now. \nId will be unique for each section bounded by vertical lines\nClass will be generated randomly for now 0-k\n\n\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}